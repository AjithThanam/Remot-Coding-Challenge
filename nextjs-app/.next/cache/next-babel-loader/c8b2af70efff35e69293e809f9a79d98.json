{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as types from '../types';\nimport Key from '../../key.json';\nimport axios from 'axios';\nimport fetcher from '../fetcher';\nexport var fetchposts = function fetchposts() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch({\n                type: types.GET_POSTS,\n                payload: ['post']\n              });\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var setposts = function setposts() {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              dispatch({\n                type: types.SET_POSTS,\n                payload: ['set']\n              });\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport var fetchProductsSuccess = function fetchProductsSuccess(products) {\n  return {\n    type: types.FETCH_POSTS,\n    payload: {\n      products: products\n    }[0].id\n  };\n};\nexport function fetchTweets() {\n  return function (dispatch) {\n    return fetch(\"https://jsonplaceholder.typicode.com/comments\").then(function (res) {\n      return res.json();\n    }).then(function (json) {\n      dispatch(fetchProductsSuccess(json.products));\n      return products;\n    });\n  };\n}","map":{"version":3,"sources":["C:/Users/Home/Desktop/Remot/Remot-Coding-Challenge/nextjs-app/redux/actions/postAction.js"],"names":["types","Key","axios","fetcher","fetchposts","dispatch","type","GET_POSTS","payload","setposts","SET_POSTS","fetchProductsSuccess","products","FETCH_POSTS","id","fetchTweets","fetch","then","res","json"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,UAAvB;AACA,OAAOC,GAAP,MAAgB,gBAAhB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,YAApB;AAGA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA,wEAAM,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AACxBA,cAAAA,QAAQ,CAAC;AACTC,gBAAAA,IAAI,EAAEN,KAAK,CAACO,SADH;AAETC,gBAAAA,OAAO,EAAE,CAAC,MAAD;AAFA,eAAD,CAAR;;AADwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAN;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;AAOP,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA;AAAA,yEAAM,kBAAMJ,QAAN;AAAA;AAAA;AAAA;AAAA;AAC1BA,cAAAA,QAAQ,CAAC;AAELC,gBAAAA,IAAI,EAAEN,KAAK,CAACU,SAFP;AAGLF,gBAAAA,OAAO,EAAC,CAAC,KAAD;AAHH,eAAD,CAAR;;AAD0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAN;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB;AAQP,OAAO,IAAMG,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAAC,QAAQ;AAAA,SAAK;AAC/CN,IAAAA,IAAI,EAAEN,KAAK,CAACa,WADmC;AAE/CL,IAAAA,OAAO,EAAE;AAAEI,MAAAA,QAAQ,EAARA;AAAF,MAAa,CAAb,EAAgBE;AAFsB,GAAL;AAAA,CAArC;AAMP,OAAO,SAASC,WAAT,GAAsB;AACzB,SAAO,UAAAV,QAAQ,EAAI;AACnB,WAAOW,KAAK,CAAC,+CAAD,CAAL,CACNC,IADM,CACD,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,KADF,EAEJF,IAFI,CAEC,UAAAE,IAAI,EAAI;AACZd,MAAAA,QAAQ,CAACM,oBAAoB,CAACQ,IAAI,CAACP,QAAN,CAArB,CAAR;AACA,aAAOA,QAAP;AACD,KALI,CAAP;AAMD,GAPC;AAQH","sourcesContent":["import * as types from '../types'\r\nimport Key from '../../key.json';\r\nimport axios from 'axios'\r\nimport fetcher from '../fetcher'\r\n\r\n\r\nexport const fetchposts = () => async dispatch => {\r\n        dispatch({\r\n        type: types.GET_POSTS,\r\n        payload: ['post']\r\n    })\r\n}\r\n\r\nexport const setposts = () => async dispatch => {\r\n    dispatch({\r\n\r\n        type: types.SET_POSTS,\r\n        payload:['set']\r\n    })\r\n}\r\n\r\nexport const fetchProductsSuccess = products => ({\r\n  type: types.FETCH_POSTS,\r\n  payload: { products }[0].id\r\n});\r\n\r\n\r\nexport function fetchTweets(){\r\n    return dispatch => {\r\n    return fetch(\"https://jsonplaceholder.typicode.com/comments\")\r\n    .then(res => res.json())\r\n      .then(json => {\r\n        dispatch(fetchProductsSuccess(json.products));\r\n        return products;\r\n      })\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}