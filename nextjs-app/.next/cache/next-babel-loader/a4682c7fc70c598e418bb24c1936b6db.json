{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as types from '../types';\nimport Key from '../../key.json';\nimport axios from 'axios';\nimport fetcher from '../fetcher';\nexport var fetchposts = function fetchposts() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch({\n                type: types.GET_POSTS,\n                payload: ['post']\n              });\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var setposts = function setposts() {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var res, json;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return axios({\n                method: 'get',\n                //you can set what request you want to be\n                url: 'https://cors-anywhere.herokuapp.com/https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name=realDonaldTrump&count=1',\n                mode: 'no-cors',\n                headers: {\n                  Authorization: Key.key,\n                  'Access-Control-Allow-Origin': '*'\n                }\n              });\n\n            case 2:\n              res = _context2.sent;\n              json = JSON.stringify(res.data);\n              dispatch({\n                type: types.SET_POSTS,\n                payload: json\n              });\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["C:/Users/Home/Desktop/Remot/Remot-Coding-Challenge/nextjs-app/redux/actions/postAction.js"],"names":["types","Key","axios","fetcher","fetchposts","dispatch","type","GET_POSTS","payload","setposts","method","url","mode","headers","Authorization","key","res","json","JSON","stringify","data","SET_POSTS"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,UAAvB;AACA,OAAOC,GAAP,MAAgB,gBAAhB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,YAApB;AAGA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA,wEAAM,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AACxBA,cAAAA,QAAQ,CAAC;AACTC,gBAAAA,IAAI,EAAEN,KAAK,CAACO,SADH;AAETC,gBAAAA,OAAO,EAAE,CAAC,MAAD;AAFA,eAAD,CAAR;;AADwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAN;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;AAOP,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA;AAAA,yEAAM,kBAAMJ,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAcRH,KAAK,CAAC;AAChBQ,gBAAAA,MAAM,EAAE,KADQ;AACD;AACfC,gBAAAA,GAAG,EAAE,iIAFW;AAGhBC,gBAAAA,IAAI,EAAE,SAHU;AAIhBC,gBAAAA,OAAO,EAAE;AACLC,kBAAAA,aAAa,EAAEb,GAAG,CAACc,GADd;AAEL,iDAA+B;AAF1B;AAJO,eAAD,CAdG;;AAAA;AAcpBC,cAAAA,GAdoB;AAwBpBC,cAAAA,IAxBoB,GAwBbC,IAAI,CAACC,SAAL,CAAeH,GAAG,CAACI,IAAnB,CAxBa;AA0B1Bf,cAAAA,QAAQ,CAAC;AACLC,gBAAAA,IAAI,EAAEN,KAAK,CAACqB,SADP;AAELb,gBAAAA,OAAO,EAACS;AAFH,eAAD,CAAR;;AA1B0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAN;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB","sourcesContent":["import * as types from '../types'\r\nimport Key from '../../key.json';\r\nimport axios from 'axios'\r\nimport fetcher from '../fetcher'\r\n\r\n\r\nexport const fetchposts = () => async dispatch => {\r\n        dispatch({\r\n        type: types.GET_POSTS,\r\n        payload: ['post']\r\n    })\r\n}\r\n\r\nexport const setposts = () => async dispatch => {\r\n    //Pulling From the Twitter API Resulted in a status 400, \r\n    //with no real cause. Authorizations worked as expect but request was aborted regardless\r\n    //\r\n    // const trumpEndpoint = 'https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name=realDonaldTrump&count=1';\r\n    // let response = await fetch(trumpEndpoint,{\r\n    //      headers: {\r\n    //             'Authorization': Key.key\r\n    //         },\r\n    //         mode: 'no-cors'\r\n    // })\r\n\r\n    //const res = await axios.get('https://jsonplaceholder.typicode.com/comments')\r\n\r\n    const res = await axios({\r\n            method: 'get', //you can set what request you want to be\r\n            url: 'https://cors-anywhere.herokuapp.com/https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name=realDonaldTrump&count=1',\r\n            mode: 'no-cors',\r\n            headers: {\r\n                Authorization: Key.key,\r\n                'Access-Control-Allow-Origin': '*',\r\n            }\r\n        })\r\n\r\n    const json = JSON.stringify(res.data)\r\n\r\n    dispatch({\r\n        type: types.SET_POSTS,\r\n        payload:json\r\n    })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}