{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as types from '../types';\nimport Key from '../../key.json';\nimport axios from 'axios';\nexport var fetchTrumpTweets = function fetchTrumpTweets() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var response, tweetArr, tweetDateArr, i;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return axios({\n                method: 'get',\n                url: 'https://cors-anywhere.herokuapp.com/https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name=realDonaldTrump&count=3&include_entities=false',\n                mode: 'no-cors',\n                headers: {\n                  Authorization: Key.key,\n                  'Access-Control-Allow-Origin': '*'\n                }\n              });\n\n            case 2:\n              response = _context.sent;\n              tweetArr = [];\n              tweetDateArr = [];\n\n              for (i = 0; i < response.data.length; i++) {\n                tweetArr[i] = response.data[i].text;\n                tweetDateArr[i] = response.data[i].created_at.substring(0, response.data[i].created_at.indexOf('+'));\n              }\n\n              dispatch({\n                type: types.TRUMP_TWEETS,\n                payload: tweetArr,\n                dates: tweetDateArr\n              });\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var fetchHillaryTweets = function fetchHillaryTweets() {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var response, tweetArr, tweetDateArr, i;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return axios({\n                method: 'get',\n                url: 'https://cors-anywhere.herokuapp.com/https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name=HillaryClinton&count=3&include_entities=false',\n                mode: 'no-cors',\n                headers: {\n                  Authorization: Key.key,\n                  'Access-Control-Allow-Origin': '*'\n                }\n              });\n\n            case 2:\n              response = _context2.sent;\n              tweetArr = [];\n              tweetDateArr = [];\n\n              for (i = 0; i < response.data.length; i++) {\n                tweetArr[i] = response.data[i].text;\n                tweetDateArr[i] = response.data[i].created_at.substring(0, response.data[i].created_at.indexOf('+'));\n              }\n\n              dispatch({\n                type: types.HILLARY_TWEETS,\n                payload: tweetArr,\n                dates: tweetDateArr\n              });\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["C:/Users/Home/Desktop/Remot/Remot-Coding-Challenge/nextjs-app/redux/actions/tweetAction.js"],"names":["types","Key","axios","fetchTrumpTweets","dispatch","method","url","mode","headers","Authorization","key","response","tweetArr","tweetDateArr","i","data","length","text","created_at","substring","indexOf","type","TRUMP_TWEETS","payload","dates","fetchHillaryTweets","HILLARY_TWEETS"],"mappings":"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","sourcesContent":["import * as types from '../types'\r\nimport Key from '../../key.json';\r\nimport axios from 'axios'\r\n\r\n\r\n\r\nexport const fetchTrumpTweets = () => async dispatch => {\r\n    const response = await axios({\r\n            method: 'get', \r\n            url: 'https://cors-anywhere.herokuapp.com/https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name=realDonaldTrump&count=3&include_entities=false',\r\n            mode: 'no-cors',\r\n            headers: {\r\n                Authorization: Key.key,\r\n                'Access-Control-Allow-Origin': '*',\r\n            }\r\n        })\r\n\r\n    let tweetArr = [];\r\n    let tweetDateArr = [];\r\n\r\n    for (let i = 0; i < response.data.length; i++){\r\n        tweetArr[i] = response.data[i].text\r\n        tweetDateArr[i] = response.data[i].created_at.substring(0, response.data[i].created_at.indexOf('+'));\r\n    }\r\n\r\n    dispatch({\r\n        type: types.TRUMP_TWEETS,\r\n        payload: tweetArr,\r\n        dates:tweetDateArr\r\n    })\r\n}\r\n\r\nexport const fetchHillaryTweets = () => async dispatch => {\r\n    const response = await axios({\r\n            method: 'get', \r\n            url: 'https://cors-anywhere.herokuapp.com/https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name=HillaryClinton&count=3&include_entities=false',\r\n            mode: 'no-cors',\r\n            headers: {\r\n                Authorization: Key.key,\r\n                'Access-Control-Allow-Origin': '*',\r\n            }\r\n        })\r\n\r\n    let tweetArr = [];\r\n    let tweetDateArr = [];\r\n\r\n    for (let i = 0; i < response.data.length; i++){\r\n        tweetArr[i] = response.data[i].text\r\n        tweetDateArr[i] = response.data[i].created_at.substring(0, response.data[i].created_at.indexOf('+'));\r\n    }\r\n\r\n    dispatch({\r\n        type: types.HILLARY_TWEETS,\r\n        payload:tweetArr,\r\n        dates:tweetDateArr\r\n\r\n    })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}