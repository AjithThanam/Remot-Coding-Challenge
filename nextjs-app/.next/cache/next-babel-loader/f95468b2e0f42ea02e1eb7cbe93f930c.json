{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Home\\\\Desktop\\\\Remot\\\\Remot-Coding-Challenge\\\\nextjs-app\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchTrumpTweets, fetchHillaryTweets, resetView } from '../redux/actions/tweetAction';\nimport { Container, Row, Card, Button, Jumbotron } from 'react-bootstrap';\nimport React from 'react';\nexport default function Home() {\n  const dispatch = useDispatch();\n  const tweeter = useSelector(state => state);\n  return __jsx(Container, {\n    className: \"md-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }\n  }, __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 11\n    }\n  }, __jsx(Jumbotron, {\n    className: \"text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 15\n    }\n  }, __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 17\n    }\n  }, __jsx(\"h1\", {\n    className: \"title\",\n    style: {\n      fontSize: \"50px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 19\n    }\n  }, \"Welcome To The Tweet Fetcher\"), __jsx(\"h5\", {\n    style: {\n      margin: \" 0 0 20px 0\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 19\n    }\n  }, tweeter.tweeter.info), __jsx(Button, {\n    variant: \"danger active\",\n    style: {\n      fontWeight: \"bold\"\n    },\n    block: true,\n    onClick: () => dispatch(fetchTrumpTweets()),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 21\n    }\n  }, \"Show Donald Trump's Tweets\"), __jsx(Button, {\n    variant: \"primary active\",\n    style: {\n      fontWeight: \"bold\"\n    },\n    block: true,\n    onClick: () => dispatch(fetchHillaryTweets()),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 21\n    }\n  }, \"Show Hillary Clinton's Tweets\"), __jsx(Button, {\n    variant: \"secondary active\",\n    block: true,\n    onClick: () => dispatch(resetView()),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 21\n    }\n  }, \"Clear All Tweets From View\"))), __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 14\n    }\n  }, __jsx(Row, {\n    className: \"justify-content-md-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 15\n    }\n  }, tweeter.tweeter.selected && tweeter.tweeter.tweets.map(function (tweet, index) {\n    return __jsx(Card, {\n      border: \"dark\",\n      className: \"sml-card\",\n      block: true,\n      style: {\n        margin: \"10px\",\n        width: \"100%\"\n      },\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 23\n      }\n    }, __jsx(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 25\n      }\n    }, \"Tweet #\", index + 1), __jsx(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 25\n      }\n    }, __jsx(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 27\n      }\n    }, tweet), __jsx(Card.Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 27\n      }\n    }, tweeter.tweeter.dates[index])));\n  })))));\n}","map":{"version":3,"sources":["C:/Users/Home/Desktop/Remot/Remot-Coding-Challenge/nextjs-app/pages/index.js"],"names":["useDispatch","useSelector","fetchTrumpTweets","fetchHillaryTweets","resetView","Container","Row","Card","Button","Jumbotron","React","Home","dispatch","tweeter","state","fontSize","margin","info","fontWeight","selected","tweets","map","tweet","index","width","dates"],"mappings":"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","sourcesContent":["import { useDispatch, useSelector } from 'react-redux'\r\nimport { fetchTrumpTweets, fetchHillaryTweets, resetView } from '../redux/actions/tweetAction'\r\nimport { Container, Row, Card, Button, Jumbotron } from 'react-bootstrap'\r\nimport React from 'react';\r\n\r\n\r\nexport default function Home() {\r\n\r\n    const dispatch = useDispatch();\r\n    const tweeter  = useSelector(state => state);\r\n    \r\n    return (\r\n        <Container className=\"md-container\">\r\n          <Container>\r\n              <Jumbotron  className=\"text-center\" >\r\n                <Container>\r\n                  <h1 className=\"title\" style={{ fontSize: \"50px\" }}>Welcome To The Tweet Fetcher</h1>\r\n                  <h5 style={{ margin: \" 0 0 20px 0\" }}>{tweeter.tweeter.info}</h5>\r\n\r\n                    {/*\r\n                        These are the buttons that will allow to dispatch the actions to retrieve either\r\n                        persons tweets, or to clear the view from all tweets\r\n                    */}\r\n\r\n                    <Button variant=\"danger active\" style={{ fontWeight: \"bold\" }} block onClick={() => dispatch(fetchTrumpTweets())}>\r\n                        Show Donald Trump's Tweets\r\n                    </Button>\r\n                    <Button variant=\"primary active\" style={{ fontWeight: \"bold\" }} block onClick={() => dispatch(fetchHillaryTweets())}>\r\n                        Show Hillary Clinton's Tweets\r\n                    </Button>\r\n                    <Button variant=\"secondary active\" block onClick={() => dispatch(resetView())}>\r\n                        Clear All Tweets From View\r\n                    </Button>\r\n                </Container>\r\n              </Jumbotron>\r\n             <Container>\r\n              <Row className=\"justify-content-md-between\">\r\n\r\n                {/* The following conditional logic verifies if either the Trump or Hillary\r\n                    buton was pressed. \r\n                    If True, itterate through the array of tweets and display them on individual cards\r\n                    Else, Display nothing\r\n                */}\r\n                \r\n                {tweeter.tweeter.selected &&\r\n                  tweeter.tweeter.tweets.map(function(tweet, index){\r\n                    return(\r\n                      <Card border=\"dark\" className=\"sml-card\" block style={{ margin: \"10px\", width:\"100%\" }} key={ index }>\r\n                        <Card.Header>Tweet #{ index + 1 }</Card.Header>\r\n                        <Card.Body>\r\n                          <Card.Title>{ tweet }</Card.Title>\r\n                          <Card.Text>\r\n                            {tweeter.tweeter.dates[index]}\r\n                          </Card.Text>\r\n                        </Card.Body>\r\n                      </Card>\r\n                    );\r\n                  })}\r\n              </Row>\r\n        </Container> \r\n      </Container>\r\n    </Container>\r\n    )\r\n}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}