{"ast":null,"code":"import * as types from '../types';\nimport Key from '../../key.json';\nimport axios from 'axios';\nexport const fetchTrumpTweets = () => async dispatch => {\n  /**\r\n   * GET REQUEST to the twitter Api\r\n   * Do to the reques getting blocked by CORS I had to ad the \r\n   * following link as a proxy to actually process the request\r\n   * https://cors-anywhere.herokuapp.com/\r\n   */\n  const response = await axios({\n    method: 'get',\n    url: 'https://cors-anywhere.herokuapp.com/https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name=realDonaldTrump&count=6&include_entities=false',\n    mode: 'no-cors',\n    headers: {\n      Authorization: Key.key,\n      'Access-Control-Allow-Origin': '*'\n    }\n  });\n  /**\r\n   * The following snippet of code is to filter through the twitter api response \r\n   * i packaged only the necessary info such as the actual tweets and the dates\r\n   * packaged both data sets into 2 arrays\r\n   */\n\n  let tweetArr = [];\n  let tweetDateArr = [];\n\n  for (let i = 0; i < response.data.length; i++) {\n    tweetArr[i] = response.data[i].text;\n    tweetDateArr[i] = response.data[i].created_at.substring(0, response.data[i].created_at.indexOf('+'));\n  }\n\n  dispatch({\n    type: types.TRUMP_TWEETS,\n    payload: tweetArr,\n    dates: tweetDateArr\n  });\n};\nexport const fetchHillaryTweets = () => async dispatch => {\n  /**\r\n   * GET REQUEST to the twitter Api\r\n   * Do to the reques getting blocked by CORS I had to ad the \r\n   * following link as a proxy to actually process the request\r\n   * https://cors-anywhere.herokuapp.com/\r\n   */\n  const response = await axios({\n    method: 'get',\n    url: 'https://cors-anywhere.herokuapp.com/https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name=HillaryClinton&count=6&include_entities=false',\n    mode: 'no-cors',\n    headers: {\n      Authorization: Key.key,\n      'Access-Control-Allow-Origin': '*'\n    }\n  });\n  /**\r\n   * The following snippet of code is to filter through the twitter api response \r\n   * i packaged only the necessary info such as the actual tweets and the dates\r\n   * packaged both data sets into 2 arrays\r\n   */\n\n  let tweetArr = [];\n  let tweetDateArr = [];\n\n  for (let i = 0; i < response.data.length; i++) {\n    tweetArr[i] = response.data[i].text;\n    tweetDateArr[i] = response.data[i].created_at.substring(0, response.data[i].created_at.indexOf('+'));\n  }\n\n  dispatch({\n    type: types.HILLARY_TWEETS,\n    payload: tweetArr,\n    dates: tweetDateArr\n  });\n};\n/**\r\n * An empty dispatch function to clear the view from the tweets\r\n */\n\nexport const resetView = () => dispatch => {\n  dispatch({\n    type: types.RESET_TWEETS\n  });\n};","map":{"version":3,"sources":["C:/Users/Home/Desktop/Remot/Remot-Coding-Challenge/nextjs-app/redux/actions/tweetAction.js"],"names":["types","Key","axios","fetchTrumpTweets","dispatch","response","method","url","mode","headers","Authorization","key","tweetArr","tweetDateArr","i","data","length","text","created_at","substring","indexOf","type","TRUMP_TWEETS","payload","dates","fetchHillaryTweets","HILLARY_TWEETS","resetView","RESET_TWEETS"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,UAAvB;AACA,OAAOC,GAAP,MAAgB,gBAAhB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAIA,OAAO,MAAMC,gBAAgB,GAAG,MAAM,MAAMC,QAAN,IAAkB;AACpD;;;;;;AAMA,QAAMC,QAAQ,GAAG,MAAMH,KAAK,CAAC;AACrBI,IAAAA,MAAM,EAAE,KADa;AAErBC,IAAAA,GAAG,EAAE,wJAFgB;AAGrBC,IAAAA,IAAI,EAAE,SAHe;AAIrBC,IAAAA,OAAO,EAAE;AACLC,MAAAA,aAAa,EAAET,GAAG,CAACU,GADd;AAEL,qCAA+B;AAF1B;AAJY,GAAD,CAA5B;AAUA;;;;;;AAKA,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,YAAY,GAAG,EAAnB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,QAAQ,CAACU,IAAT,CAAcC,MAAlC,EAA0CF,CAAC,EAA3C,EAA8C;AAC1CF,IAAAA,QAAQ,CAACE,CAAD,CAAR,GAAcT,QAAQ,CAACU,IAAT,CAAcD,CAAd,EAAiBG,IAA/B;AACAJ,IAAAA,YAAY,CAACC,CAAD,CAAZ,GAAkBT,QAAQ,CAACU,IAAT,CAAcD,CAAd,EAAiBI,UAAjB,CAA4BC,SAA5B,CAAsC,CAAtC,EAAyCd,QAAQ,CAACU,IAAT,CAAcD,CAAd,EAAiBI,UAAjB,CAA4BE,OAA5B,CAAoC,GAApC,CAAzC,CAAlB;AACH;;AAEDhB,EAAAA,QAAQ,CAAC;AACLiB,IAAAA,IAAI,EAAErB,KAAK,CAACsB,YADP;AAELC,IAAAA,OAAO,EAAEX,QAFJ;AAGLY,IAAAA,KAAK,EAACX;AAHD,GAAD,CAAR;AAKH,CAnCM;AAqCP,OAAO,MAAMY,kBAAkB,GAAG,MAAM,MAAMrB,QAAN,IAAkB;AAEtD;;;;;;AAMA,QAAMC,QAAQ,GAAG,MAAMH,KAAK,CAAC;AACrBI,IAAAA,MAAM,EAAE,KADa;AAErBC,IAAAA,GAAG,EAAE,uJAFgB;AAGrBC,IAAAA,IAAI,EAAE,SAHe;AAIrBC,IAAAA,OAAO,EAAE;AACLC,MAAAA,aAAa,EAAET,GAAG,CAACU,GADd;AAEL,qCAA+B;AAF1B;AAJY,GAAD,CAA5B;AAUA;;;;;;AAKA,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,YAAY,GAAG,EAAnB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,QAAQ,CAACU,IAAT,CAAcC,MAAlC,EAA0CF,CAAC,EAA3C,EAA8C;AAC1CF,IAAAA,QAAQ,CAACE,CAAD,CAAR,GAAcT,QAAQ,CAACU,IAAT,CAAcD,CAAd,EAAiBG,IAA/B;AACAJ,IAAAA,YAAY,CAACC,CAAD,CAAZ,GAAkBT,QAAQ,CAACU,IAAT,CAAcD,CAAd,EAAiBI,UAAjB,CAA4BC,SAA5B,CAAsC,CAAtC,EAAyCd,QAAQ,CAACU,IAAT,CAAcD,CAAd,EAAiBI,UAAjB,CAA4BE,OAA5B,CAAoC,GAApC,CAAzC,CAAlB;AACH;;AAEDhB,EAAAA,QAAQ,CAAC;AACLiB,IAAAA,IAAI,EAAErB,KAAK,CAAC0B,cADP;AAELH,IAAAA,OAAO,EAACX,QAFH;AAGLY,IAAAA,KAAK,EAACX;AAHD,GAAD,CAAR;AAMH,CArCM;AAuCP;;;;AAGA,OAAO,MAAMc,SAAS,GAAG,MAAMvB,QAAQ,IAAI;AACvCA,EAAAA,QAAQ,CAAC;AACLiB,IAAAA,IAAI,EAAErB,KAAK,CAAC4B;AADP,GAAD,CAAR;AAGH,CAJM","sourcesContent":["import * as types from '../types'\r\nimport Key from '../../key.json';\r\nimport axios from 'axios'\r\n\r\n\r\n\r\nexport const fetchTrumpTweets = () => async dispatch => {\r\n    /**\r\n     * GET REQUEST to the twitter Api\r\n     * Do to the reques getting blocked by CORS I had to ad the \r\n     * following link as a proxy to actually process the request\r\n     * https://cors-anywhere.herokuapp.com/\r\n     */\r\n    const response = await axios({\r\n            method: 'get', \r\n            url: 'https://cors-anywhere.herokuapp.com/https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name=realDonaldTrump&count=6&include_entities=false',\r\n            mode: 'no-cors',\r\n            headers: {\r\n                Authorization: Key.key,\r\n                'Access-Control-Allow-Origin': '*',\r\n            }\r\n        })\r\n    \r\n    /**\r\n     * The following snippet of code is to filter through the twitter api response \r\n     * i packaged only the necessary info such as the actual tweets and the dates\r\n     * packaged both data sets into 2 arrays\r\n     */\r\n    let tweetArr = [];\r\n    let tweetDateArr = [];\r\n\r\n    for (let i = 0; i < response.data.length; i++){\r\n        tweetArr[i] = response.data[i].text\r\n        tweetDateArr[i] = response.data[i].created_at.substring(0, response.data[i].created_at.indexOf('+'));\r\n    }\r\n\r\n    dispatch({\r\n        type: types.TRUMP_TWEETS,\r\n        payload: tweetArr,\r\n        dates:tweetDateArr\r\n    })\r\n}\r\n\r\nexport const fetchHillaryTweets = () => async dispatch => {\r\n    \r\n    /**\r\n     * GET REQUEST to the twitter Api\r\n     * Do to the reques getting blocked by CORS I had to ad the \r\n     * following link as a proxy to actually process the request\r\n     * https://cors-anywhere.herokuapp.com/\r\n     */\r\n    const response = await axios({\r\n            method: 'get', \r\n            url: 'https://cors-anywhere.herokuapp.com/https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name=HillaryClinton&count=6&include_entities=false',\r\n            mode: 'no-cors',\r\n            headers: {\r\n                Authorization: Key.key,\r\n                'Access-Control-Allow-Origin': '*',\r\n            }\r\n        })\r\n\r\n    /**\r\n     * The following snippet of code is to filter through the twitter api response \r\n     * i packaged only the necessary info such as the actual tweets and the dates\r\n     * packaged both data sets into 2 arrays\r\n     */\r\n    let tweetArr = [];\r\n    let tweetDateArr = [];\r\n\r\n    for (let i = 0; i < response.data.length; i++){\r\n        tweetArr[i] = response.data[i].text\r\n        tweetDateArr[i] = response.data[i].created_at.substring(0, response.data[i].created_at.indexOf('+'));\r\n    }\r\n\r\n    dispatch({\r\n        type: types.HILLARY_TWEETS,\r\n        payload:tweetArr,\r\n        dates:tweetDateArr\r\n\r\n    })\r\n}\r\n\r\n/**\r\n * An empty dispatch function to clear the view from the tweets\r\n */\r\nexport const resetView = () => dispatch => {\r\n    dispatch({\r\n        type: types.RESET_TWEETS\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}