{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as types from '../types';\nconst initialState = {\n  info: \"Pleases Select Who's Tweets You Would Like To See\",\n  selected: false\n};\n/**\r\n * Standard switch case to handle wich action has been fired off \r\n * to send the proper data back to the component\r\n * \r\n * Informations being sent off\r\n * tweets: action.payload -> Contains the array of tweets\r\n * dates: action.dates - > Contains the array of dates for the tweets\r\n * info: - > a string to be displayed to give a sense of what is being showed\r\n * Selected: -> a boolean that based on its value will determin what gets rendered on the page\r\n *               if true the tweets will be displayed, if false the page will be empty (i.e. for the reset)\r\n */\n\nexport const tweetReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.TRUMP_TWEETS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tweets: action.payload,\n        dates: action.dates,\n        info: \"You Are Currently Viewing Donald Trump's Tweets\",\n        selected: true\n      });\n\n    case types.HILLARY_TWEETS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tweets: action.payload,\n        dates: action.dates,\n        info: \"You Are Currently Viewing Hillary Clinton's Tweets\",\n        selected: true\n      });\n\n    /**\r\n     * This doesnt contain any data since we dont want to display anything\r\n     * we want the view to be cleared of the tweets if any \r\n     */\n\n    case types.RESET_TWEETS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        info: \"View Cleared - Pleases Select Who's Tweets You Would Like To See\",\n        selected: false\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/Home/Desktop/Remot/Remot-Coding-Challenge/nextjs-app/redux/reducers/tweetReducer.js"],"names":["types","initialState","info","selected","tweetReducer","state","action","type","TRUMP_TWEETS","tweets","payload","dates","HILLARY_TWEETS","RESET_TWEETS"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,UAAvB;AAEA,MAAMC,YAAY,GAAG;AAChBC,EAAAA,IAAI,EAAE,mDADU;AAEhBC,EAAAA,QAAQ,EAAE;AAFM,CAArB;AAKA;;;;;;;;;;;;AAWA,OAAO,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AAC1D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,KAAK,CAACQ,YAAX;AACI,6CACOH,KADP;AAEII,QAAAA,MAAM,EAAEH,MAAM,CAACI,OAFnB;AAGIC,QAAAA,KAAK,EAAEL,MAAM,CAACK,KAHlB;AAIIT,QAAAA,IAAI,EAAE,iDAJV;AAKIC,QAAAA,QAAQ,EAAE;AALd;;AAOJ,SAAKH,KAAK,CAACY,cAAX;AACI,6CACOP,KADP;AAEII,QAAAA,MAAM,EAAEH,MAAM,CAACI,OAFnB;AAGIC,QAAAA,KAAK,EAAEL,MAAM,CAACK,KAHlB;AAIIT,QAAAA,IAAI,EAAE,oDAJV;AAKIC,QAAAA,QAAQ,EAAE;AALd;;AAQJ;;;;;AAIA,SAAKH,KAAK,CAACa,YAAX;AACI,6CACOR,KADP;AAEIH,QAAAA,IAAI,EAAE,kEAFV;AAGIC,QAAAA,QAAQ,EAAE;AAHd;;AAKJ;AACI,aAAOE,KAAP;AA7BR;AA+BH,CAhCM","sourcesContent":["import * as types from '../types'\r\n\r\nconst initialState = {\r\n     info: \"Pleases Select Who's Tweets You Would Like To See\",\r\n     selected: false\r\n}\r\n\r\n/**\r\n * Standard switch case to handle wich action has been fired off \r\n * to send the proper data back to the component\r\n * \r\n * Informations being sent off\r\n * tweets: action.payload -> Contains the array of tweets\r\n * dates: action.dates - > Contains the array of dates for the tweets\r\n * info: - > a string to be displayed to give a sense of what is being showed\r\n * Selected: -> a boolean that based on its value will determin what gets rendered on the page\r\n *               if true the tweets will be displayed, if false the page will be empty (i.e. for the reset)\r\n */\r\nexport const tweetReducer = (state = initialState, action) => {\r\n    switch (action.type){\r\n        case types.TRUMP_TWEETS:\r\n            return {\r\n                ...state,\r\n                tweets: action.payload,\r\n                dates: action.dates,\r\n                info: \"You Are Currently Viewing Donald Trump's Tweets\",\r\n                selected: true\r\n            }\r\n        case types.HILLARY_TWEETS:\r\n            return {\r\n                ...state,\r\n                tweets: action.payload,\r\n                dates: action.dates,\r\n                info: \"You Are Currently Viewing Hillary Clinton's Tweets\",\r\n                selected: true\r\n\r\n            }\r\n        /**\r\n         * This doesnt contain any data since we dont want to display anything\r\n         * we want the view to be cleared of the tweets if any \r\n         */\r\n        case types.RESET_TWEETS:\r\n            return {\r\n                ...state,\r\n                info: \"View Cleared - Pleases Select Who's Tweets You Would Like To See\",\r\n                selected: false\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}